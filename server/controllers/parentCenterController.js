const ParentCenter = require('../models/ParentCenter');
const ChildCenter = require('../models/ChildCenter'); // Import ChildCenter model

const parentCenterController = {
  // Create a new parent center with auto-generated code
  createParentCenter: async (req, res) => {
    try {
      const { companyId, title, isActive = true, createdBy, updatedBy } = req.body;
      
      // Validate input
      if (!companyId || !title) {
        return res.status(400).json({
          success: false,
          error: 'Company ID and title are required'
        });
      }
      
      // Validate companyId format (should be string)
      if (typeof companyId !== 'string' || companyId.trim().length === 0) {
        return res.status(400).json({
          success: false,
          error: 'Company ID must be a non-empty string'
        });
      }
      
      // Validate title
      if (typeof title !== 'string' || title.trim().length === 0) {
        return res.status(400).json({
          success: false,
          error: 'Title must be a non-empty string'
        });
      }
      
      // Check for duplicate title for the same company (case-insensitive)
      const existingCenter = await ParentCenter.findOne({ 
        companyId, 
        title: { $regex: new RegExp(`^${title.trim()}$`, 'i') }
      });
      
      if (existingCenter) {
        return res.status(409).json({
          success: false,
          error: 'A parent center with this title already exists for this company'
        });
      }
      
      // Create new parent center - parentCode will be auto-generated by pre-save hook
      const parentCenter = new ParentCenter({
        companyId: companyId.trim(),
        title: title.trim(),
        isActive,
        createdBy: createdBy || "System", // Set createdBy
        updatedBy: updatedBy || createdBy || "System" // Set updatedBy to same as createdBy
      });
      
      // Explicitly validate before saving to catch any validation errors
      await parentCenter.validate();
      
      // Save the document (this will trigger the pre-save hook)
      await parentCenter.save();
      
      res.status(201).json({
        success: true,
        message: 'Parent center created successfully',
        data: parentCenter
      });
    } catch (err) {
      console.error('Error creating parent center:', err);
      
      let errorMessage = 'Failed to create parent center';
      if (err.name === 'ValidationError') {
        // Handle validation errors
        const errors = Object.values(err.errors).map(val => val.message);
        errorMessage = errors.join(', ');
      } else if (err.code === 11000) {
        errorMessage = 'Parent center with this code already exists';
      } else if (err.message.includes('Failed to generate parent code')) {
        errorMessage = 'Failed to generate parent center code';
      }
      
      res.status(500).json({
        success: false,
        error: errorMessage,
        details: process.env.NODE_ENV === 'development' ? {
          message: err.message,
          stack: err.stack
        } : undefined
      });
    }
  },
  
  // Get all parent centers for a company
  getParentCenters: async (req, res) => {
    try {
      const { companyId } = req.params;
      
      if (!companyId) {
        return res.status(400).json({
          success: false,
          error: 'Company ID is required'
        });
      }
      
      const parentCenters = await ParentCenter.find({ companyId })
        .sort({ parentCode: 1 })
        .lean();
      
      res.json({
        success: true,
        count: parentCenters.length,
        data: parentCenters
      });
    } catch (err) {
      console.error('Error fetching parent centers:', err);
      res.status(500).json({
        success: false,
        error: 'Failed to fetch parent centers',
        details: process.env.NODE_ENV === 'development' ? {
          message: err.message,
          stack: err.stack
        } : undefined
      });
    }
  },
  
  // Get a single parent center by ID
  getParentCenter: async (req, res) => {
    try {
      const { id } = req.params;
      const parentCenter = await ParentCenter.findById(id).lean();
      
      if (!parentCenter) {
        return res.status(404).json({
          success: false,
          error: 'Parent center not found'
        });
      }
      
      res.json({
        success: true,
        data: parentCenter
      });
    } catch (err) {
      console.error('Error fetching parent center:', err);
      res.status(500).json({
        success: false,
        error: 'Failed to fetch parent center',
        details: process.env.NODE_ENV === 'development' ? {
          message: err.message,
          stack: err.stack
        } : undefined
      });
    }
  },
  
  // Update a parent center (title and status only)
  updateParentCenter: async (req, res) => {
    try {
      const { id } = req.params;
      const { title, isActive, updatedBy } = req.body;
      
      // Validate title if provided
      if (title && (typeof title !== 'string' || title.trim().length === 0)) {
        return res.status(400).json({
          success: false,
          error: 'Title must be a non-empty string'
        });
      }
      
      const updateData = {};
      if (title) updateData.title = title.trim();
      if (typeof isActive === 'boolean') updateData.isActive = isActive;
      if (updatedBy) updateData.updatedBy = updatedBy; // Only update updatedBy
      
      if (Object.keys(updateData).length === 0) {
        return res.status(400).json({
          success: false,
          error: 'No valid fields provided for update'
        });
      }
      
      const updatedParentCenter = await ParentCenter.findByIdAndUpdate(
        id,
        updateData,
        { new: true, runValidators: true }
      );
      
      if (!updatedParentCenter) {
        return res.status(404).json({
          success: false,
          error: 'Parent center not found'
        });
      }
      
      res.json({
        success: true,
        message: 'Parent center updated successfully',
        data: updatedParentCenter
      });
    } catch (err) {
      console.error('Error updating parent center:', err);
      res.status(500).json({
        success: false,
        error: 'Failed to update parent center',
        details: process.env.NODE_ENV === 'development' ? {
          message: err.message,
          stack: err.stack
        } : undefined
      });
    }
  },
  
  // Delete a parent center
  deleteParentCenter: async (req, res) => {
    try {
      const { id } = req.params;
      
      // First, check if the parent center exists
      const parentCenter = await ParentCenter.findById(id);
      
      if (!parentCenter) {
        return res.status(404).json({
          success: false,
          error: 'Parent center not found'
        });
      }
      
      // Check if there are any child centers associated with this parent center
      const childCentersCount = await ChildCenter.countDocuments({ parentCenterId: id });
      
      if (childCentersCount > 0) {
        return res.status(400).json({
          success: false,
          error: `Cannot delete parent center. It has ${childCentersCount} associated child center(s). Please delete all child centers first.`
        });
      }
      
      // If no child centers exist, proceed with deletion
      const deletedParentCenter = await ParentCenter.findByIdAndDelete(id);
      
      res.json({
        success: true,
        message: 'Parent center deleted successfully',
        data: deletedParentCenter
      });
    } catch (err) {
      console.error('Error deleting parent center:', err);
      res.status(500).json({
        success: false,
        error: 'Failed to delete parent center',
        details: process.env.NODE_ENV === 'development' ? {
          message: err.message,
          stack: err.stack
        } : undefined
      });
    }
  },
  
  // Toggle active status
  toggleActiveStatus: async (req, res) => {
    try {
      const { id } = req.params;
      const { isActive, updatedBy } = req.body;
      
      const parentCenter = await ParentCenter.findById(id);
      
      if (!parentCenter) {
        return res.status(404).json({
          success: false,
          error: 'Parent center not found'
        });
      }
      
      parentCenter.isActive = typeof isActive === 'boolean' ? isActive : !parentCenter.isActive;
      if (updatedBy) parentCenter.updatedBy = updatedBy; // Only update updatedBy
      
      await parentCenter.save();
      
      res.json({
        success: true,
        message: `Parent center ${parentCenter.isActive ? 'activated' : 'deactivated'} successfully`,
        data: parentCenter
      });
    } catch (err) {
      console.error('Error toggling parent center status:', err);
      res.status(500).json({
        success: false,
        error: 'Failed to toggle active status',
        details: process.env.NODE_ENV === 'development' ? {
          message: err.message,
          stack: err.stack
        } : undefined
      });
    }
  }
};

module.exports = parentCenterController;